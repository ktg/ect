/*
<COPYRIGHT>

Copyright (c) 2004-2005, University of Nottingham
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 - Redistributions of source code must retain the above copyright notice, this
   list of conditions and the following disclaimer.

 - Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

 - Neither the name of the University of Nottingham
   nor the names of its contributors may be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

</COPYRIGHT>

Created by: Chris Greenhalgh (University of Nottingham)
Contributors:
  Chris Greenhalgh (University of Nottingham)

*/
/*

  File:    equip_data_tuple.idl
  $Id: equip_data_tuple.idl,v 1.2 2005/04/25 08:00:08 cgreenhalgh Exp $
  Created:  24/9/2002
  Author:  Chris Greenhalgh

  Purpose:
    generic (java-oriented) data sharing types cf TSpaces and JavaSpaces

  To do:

  Change History:
  $Log: equip_data_tuple.idl,v $
  Revision 1.2  2005/04/25 08:00:08  cgreenhalgh
  added dictionary type

  Revision 1.3  2005/04/23 21:19:16  cmg
  added Dictionary type

  Revision 1.2  2005/03/08 14:36:25  cmg
  added BSD license

  Revision 1.1  2004/07/15 08:12:11  cmg
  initial copy from Equator/Modules/equip//include

  Revision 1.2  2003/06/20 17:03:28  cmg
  more comments

  Revision 1.1  2002/09/25 09:03:03  cmg
  initial version

*/

/*======================================================================*/
/* includes */

#include "eqDataTypes.idl"

/*======================================================================*/
/* begin equip namespace */

module equip {
  module data {

    /*------------------------------------------------------------*/
    /** array of ValueBase */
    typedef sequence<equip::runtime::ValueBase> ValueBaseArray;

    /** The generic tuple type.
     *   Matches iff array of fields in template is no longer than
     * array of fields in value, and each field in the template is
     * null (wildcard) or matches the field value in the value
     * object.<P>
     *   Please use a StringBox as the first field to contain a 
     * nominal tuple pseudo-class name. To simulate sub-class
     * matching make this the top-most superclass; include sub-class
     * names as StringBox fields after gaps for superclass fields.
     * e.g. ["superclass","field1","field2","subclass","field3"]
     * will match ["superclass","field1","field2"].<P>
     */
    valuetype Tuple : ::equip::data::ItemData {
      /** array of fields */
      public ValueBaseArray fields;
    };

    /*------------------------------------------------------------*/
    /** byte array */
    typedef sequence<octet> Octets;

    /** holder for a serialized native language object.
     * matching requires byte equality of serialisation. 
     */
    valuetype SerializedObject {
      /** serialization method used with this instance.
       * e.g. "java", "equip".
       * no point comparing if they differ, or trying to deserialize.
       */
      public string serializationMethod;
      /** actual bytes of serialised data. */
      public Octets data;
    };

    /*------------------------------------------------------------*/
    /* primitive type boxes, 1D arrays and 2D arrays of primitives */

    /** primitive boolean box type */
    valuetype BooleanBox {
      /** the boxed primitive value */
      public boolean value;
    };

    /** array of Boolean */
    typedef sequence<boolean> BooleanArray;

    /** boxed array of boolean */
    valuetype BooleanArrayBox {
      /** the boxed array value */
      public BooleanArray value;
    };

    /** 2D array of Boolean */
    typedef sequence<BooleanArray> BooleanArray2D;

    /** boxed 2D array of boolean */
    valuetype BooleanArray2DBox {
      /** the boxed 2D array value */
      public BooleanArray2D value;
    };


    /** primitive (IDL) char box type. 
     * warning - probably only 8 bits. */
    valuetype CharBox {
      /** the boxed primitive value */
      public char value;
    };

    /** array of Char */
    typedef sequence<char> CharArray;

    /** boxed array of char */
    valuetype CharArrayBox {
      /** the boxed array value */
      public CharArray value;
    };

    /** 2D array of Char */
    typedef sequence<CharArray> CharArray2D;

    /** boxed 2D array of char */
    valuetype CharArray2DBox {
      /** the boxed 2D array value */
      public CharArray2D value;
    };


    /** primitive byte (IDL octet) box type */
    valuetype ByteBox {
      /** the boxed primitive value */
      public octet value;
    };

    /** array of Byte */
    typedef sequence<octet> ByteArray;

    /** boxed array of byte */
    valuetype ByteArrayBox {
      /** the boxed array value */
      public ByteArray value;
    };

    /** 2D array of Byte */
    typedef sequence<ByteArray> ByteArray2D;

    /** boxed 2D array of byte */
    valuetype ByteArray2DBox {
      /** the boxed 2D array value */
      public ByteArray2D value;
    };


    /** primitive short box type */
    valuetype ShortBox {
      /** the boxed primitive value */
      public short value;
    };

    /** array of Short */
    typedef sequence<short> ShortArray;

    /** boxed array of short */
    valuetype ShortArrayBox {
      /** the boxed array value */
      public ShortArray value;
    };

    /** 2D array of Short */
    typedef sequence<ShortArray> ShortArray2D;

    /** boxed 2D array of short */
    valuetype ShortArray2DBox {
      /** the boxed 2D array value */
      public ShortArray2D value;
    };


    /** primitive int (IDL long) box type */
    valuetype IntBox {
      /** the boxed primitive value */
      public long value;
    };

    /** array of Int (IDL long) */
    typedef sequence<long> IntArray;

    /** boxed array of int (IDL long) */
    valuetype IntArrayBox {
      /** the boxed array value */
      public IntArray value;
    };

    /** 2D array of Int (IDL long) */
    typedef sequence<IntArray> IntArray2D;

    /** boxed 2D array of int (IDL long) */
    valuetype IntArray2DBox {
      /** the boxed 2D array value */
      public IntArray2D value;
    };


    /** primitive long (IDL long long) box type */
    valuetype LongBox {
      /** the boxed primitive value */
      public long long value;
    };

    /** array of Long (IDL long long) */
    typedef sequence<long long> LongArray;

    /** boxed array of long (IDL long long) */
    valuetype LongArrayBox {
      /** the boxed array value */
      public LongArray value;
    };

    /** 2D array of Long (IDL long long) */
    typedef sequence<LongArray> LongArray2D;

    /** boxed 2D array of long (IDL long long) */
    valuetype LongArray2DBox {
      /** the boxed 2D array value */
      public LongArray2D value;
    };


    /** primitive float box type */
    valuetype FloatBox {
      /** the boxed primitive value */
      public float value;
    };

    /** array of Float */
    typedef sequence<float> FloatArray;

    /** boxed array of float */
    valuetype FloatArrayBox {
      /** the boxed array value */
      public FloatArray value;
    };

    /** 2D array of Float */
    typedef sequence<FloatArray> FloatArray2D;

    /** boxed 2D array of float */
    valuetype FloatArray2DBox {
      /** the boxed 2D array value */
      public FloatArray2D value;
    };


    /** primitive double box type */
    valuetype DoubleBox {
      /** the boxed primitive value */
      public double value;
    };

    /** array of Double */
    typedef sequence<double> DoubleArray;

    /** boxed array of double */
    valuetype DoubleArrayBox {
      /** the boxed array value */
      public DoubleArray value;
    };

    /** 2D array of Double */
    typedef sequence<DoubleArray> DoubleArray2D;

    /** boxed 2D array of double */
    valuetype DoubleArray2DBox {
      /** the boxed 2D array value */
      public DoubleArray2D value;
    };


    /** primitive string box type */
    valuetype StringBox {
      /** the boxed primitive value */
      public string value;
    };

    /** array of String */
    typedef sequence<string> StringArray;

    /** boxed array of string */
    valuetype StringArrayBox {
      /** the boxed array value */
      public StringArray value;
    };

    /** 2D array of String */
    typedef sequence<StringArray> StringArray2D;

    /** boxed 2D array of string */
    valuetype StringArray2DBox {
      /** the boxed 2D array value */
      public StringArray2D value;
    };


    /** generic ValueBase array box type */
    valuetype ValueBaseArrayBox {
      /** the boxed primitive value */
      public ValueBaseArray value;
    };

    /*------------------------------------------------------------*/

    /** a single entry in a Dictionary. 
     */
    valuetype DictionaryEntry {
      /** the name of this entry */
      public string name;
      /** the value of this entryt */
      public equip::runtime::ValueBase value;
    };

    /** an array of DictionaryEntrys */
    typedef sequence<DictionaryEntry> DictionaryEntryArray;

    /** A dictionary, ie a set of mappings from String to ValueBase.
    * Useful for sets of named attributes, encoding of object fields, etc.
    * Normally used via the put, get operations. See Java version for
    * helpers convertors to/from Hashtable/similar. Internally it is 
    * an array of DictionaryEntry, in name lexical order. 
    */
    valuetype Dictionary {
      /** entries */
      public DictionaryEntryArray entries;
    };

    /*------------------------------------------------------------*/
    /* end */
  };
};

/* EOF */
