/*
<COPYRIGHT>

Copyright (c) 2002-2005, University of Nottingham
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 - Redistributions of source code must retain the above copyright notice, this
   list of conditions and the following disclaimer.

 - Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

 - Neither the name of the University of Nottingham
   nor the names of its contributors may be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

</COPYRIGHT>

Created by: Chris Greenhalgh (University of Nottingham)
Contributors:
  Chris Greenhalgh (University of Nottingham)

*/
package equip.runtime;
import java.io.*;

/** EQUIP-specific serialisation input stream for reading 
 * serialised instances of {@link equip.runtime.ValueBase} from.
 *
 * Used in place of {@link java.io.ObjectInputStream} since
 * the serialisation is the same for EQUIP IDL-defined classes
 * in C++ as well.  */
public class ObjectInputStream extends DataInputStream {
  /** Construct over a {@link java.io.InputStream}.
   *
   * <b>Note:</b> like {@link java.io.ObjectInputStream}, this
   * constructor will block until it has read some information
   * from the input stream that is generated by the corresponding
   * {@link equip.runtime.ObjectOutputStream}; if this information
   * is not available (e.g. due to order of stream creation, or 
   * buffering) then you may get deadlock.
   *
   * @throws IOException If stream does not appear to originate from
   * a compatible {@link equip.runtime.ObjectOutputStream}. */
  public ObjectInputStream(InputStream in) throws IOException {
    super(in);
    short magic, version;
    magic = readShort();
    if (magic!=ObjectOutputStream.MAGIC) 
      throw new IOException("ObjectInputStream wrong magic: "+magic);
    version = readShort();
    if (version!=ObjectOutputStream.VERSION) 
      throw new IOException("ObjectInputStream wrong version: "+version);
  }
  /** Read a Java string from the stream (handles nulls ok). */
  public String readString() throws IOException {
    byte tc = readByte();
    if (tc==ObjectOutputStream.TC_NULL)
      return null;
    if (tc!=ObjectOutputStream.TC_STRING)
      throw new IOException("Expected TC_STRING but found "+tc);
    return readUTF();
  }
  /** shared loader */
  static ClassLoader loader = new FileClassLoader("");
    /** read an object (subclass of {@link equip.runtime.ValueBase})
     * from the input stream; handles nulls ok.
     *
     * @return De-serialised object, or null if null was written 
     * explicitly to the stream.
     * @throws IOException Miscellaneous problem, e.g. end of stream.
     * @throws ClassNotFoundException The class named in the stream
     * could not be loaded in this JVM.
     * @throws InstantiationException There was a problem creating an
     * instance of the class named in the stream.
     */
  public ValueBase readObject() 
    throws IOException, ClassNotFoundException, InstantiationException {
    byte tc = readByte();
    if (tc==ObjectOutputStream.TC_NULL)
      return null;
    if (tc!=ObjectOutputStream.TC_OBJECT)
      throw new IOException("Expected TC_OBJECT but found "+tc);
    String classname = readUTF();
    classname = classname+"Impl";
    //System.err.println("Note: trying to read object of class \""+classname+"\"...");
    // modules....
    java.lang.Class c = loader.loadClass(classname);
    java.lang.Object object = null;
    try {
      object = c.newInstance();
    } catch (IllegalAccessException e) {
      throw new InstantiationException("Access denied to class "+classname+
				       ".newInstance()");
    }
    //System.err.println("OK");
    if (!(object instanceof ValueBase)) 
      throw new IOException("Class "+classname+" does not extend Object");
    ValueBase eq = (ValueBase)object;  
    eq.readObject(this);
    return eq;
  }
	
  /** Internal operation use by object de-serialisers */
  public void readObjectStart() throws IOException { }
  /** Internal operation use by object de-serialisers */
  public void readObjectEnd() throws IOException { }
}
