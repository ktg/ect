/*
<COPYRIGHT>

Copyright (c) 2002-2005, University of Nottingham
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 - Redistributions of source code must retain the above copyright notice, this
   list of conditions and the following disclaimer.

 - Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

 - Neither the name of the University of Nottingham
   nor the names of its contributors may be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

</COPYRIGHT>

Created by: Chris Greenhalgh (University of Nottingham)
Contributors:
  Chris Greenhalgh (University of Nottingham)

*/
/* EventPattern 
 * autogenerated from common/idl/eqDataTypes.idl
 * by eqidl
 * DO NOT MODIFY
 */


package equip.data;

import equip.runtime.*;

/** An {@link ItemData} subclass which represents a process's
     * interest in a certain kind of event(s).
     * 
     * An instance of the event type itself is the pattern,
     * using match(). This coniders null strings and valuetype
     * references to be wildcards, and requires that the pattern
     * be the same class or a subclass of the matched object. <P>
     *
     * The different kinds of patterns define different ways in 
     * which they are satisfied and/or removed from the system.<P>
     *
     * An {@link AddEvent} with kind {@link
     * ItemEventKind#EQDATA_KIND_PRESENT} (or wildcard) will match
     * items already in existance (as if the Pattern has been in place
     * before they were created).<P>
     *
     * Similarly, a {@link DeleteEvent} with that kind will cause
     * callbacks when the pattern is deleted for any matching items
     * still present in the database.<P>
     * 
     * Inherited from ItemData:
     * <ul>
     * <li> id of the pattern itself, which may persist within the database
     * </ul>
     */
public abstract class EventPattern extends equip.data.ItemData {

  /** Default no-arg constructor */
  public EventPattern() {}

  /* member variables */
/** Template to be matched by the item to which an item-linked
       * event relates (add, delete, update, mutate).  
       *
       * I.e. the {@link #itemTemplates} AND the {@link
       * #eventTemplates} must match.  (no itemTemplates -> any item,
       * no eventTemplates -> any event).
       */
  public equip.data.ItemData itemTemplates[] = new equip.data.ItemData [0];
/** Template to be matched by a dataspace event.
       *
       * Note, for item-related events (add, delete, update, mutate),
       * {@link #itemTemplates} must also match.
       */
  public equip.data.Event eventTemplates[] = new equip.data.Event [0];
/** flag to remove pattern as soon as first full check complete.
       * i.e. probe momentary current state. 
       * Only useful with Add/Delete (PRESENT) pseudo-events
       */
  public boolean deleteOnCheck;
/** flag to delete pattern if a successful match occurs.
       * c.f. tuplespace 'read' of a single item
       */
  public boolean deleteOnMatch;
/** internal flag indicating pattern has been successfully matched.
       * used internally in DataSession;
       * must be set to false when the EventPattern is first added to
       * a dataspace. */
  public boolean matched;
/** Whether to delete the matched item (for Add/Delete pseudo-events)
       * after any/each successful match. 
       *
       * Match is only deemed to succeed if the delete has/will
       * succeed.  c.f. tuplespace 'out' (single if also
       * deleteOnMatch, else multiple)
       */
  public boolean deleteItemOnMatch;
/**  Is the event pattern for the local database only? */
  public boolean local;
/** convenience initialisation: tuplespace read - single
       * matching item (<b>NB</b>only works on <b>local</b> dataspace
       * at present).  (deleteOnMatch)
       */
  public abstract void initAsSimpleRead(equip.data.ItemData itemTemplate, boolean local);
/** convenience initialisation: tuplespace readp (predicate) -
       * single matching item, or null if no item is present at the
       * moment (read waits for an item) (<b>NB</b>only works on
       * <b>local</b> dataspace at present).  (deleteOnMatch,
       * deleteOnCheck)
       */
  public abstract void initAsSimpleReadp(equip.data.ItemData itemTemplate, boolean local);
/** convenience initialisation: tuplespace out - single matching
       * item, which is atomically removed from the data space
       * (<b>NB</b>only works on <b>local</b> dataspace at present).
       * (deleteOnMatch, deleteItemOnMatch)
       */
  public abstract void initAsSimpleOut(equip.data.ItemData itemTemplate, boolean local);
/** convenience initialisation: tuplespace copy-collect - all
       * matching items are returned (read) (<b>NB</b>only works on
       * <b>local</b> dataspace at present).  (deleteOnCheck)
       */
  public abstract void initAsSimpleCopyCollect(equip.data.ItemData itemTemplate, boolean local);
/** convenience initialisation: 
       * tuplespace collect - all matching items are returned and
       * deleted (out) (<b>NB</b>only works on <b>local</b> dataspace
       * at present).
       * (deleteOnCheck, deleteItemOnMatch)
       */
  public abstract void initAsSimpleCollect(equip.data.ItemData itemTemplate, boolean local);
/** convenience initialisation: like an ongoing copy-collect:
       *  makes an event pattern for Add, update and delete events on
       *  the matching itemTemplate (works globally but
       *  asynchrnously). <P>
       *
       * Using the {@link ItemEventKind#EQDATA_KIND_PRESENT} kind (or
       * wildcard) this also returns items existing when the patterns
       * is first added to a session. It will then return
       * add/update/delete events matching until the pattern is
       * removed.<P>
       *
       * This is the main method used for inter-dataspace replication,
       * since a non-local item monitor will be copied to other connected
       * dataspace replicas and cause matching items to be copied to and
       * kept up to date in the originating dataspace. <P>
       */
  public abstract void initAsSimpleItemMonitor(equip.data.ItemData itemTemplate, boolean local);
/** convenience initialisation: version of {@link
       * #initAsSimpleItemMonitor} for multiple item templates. */
  public abstract void initAsCompoundItemMonitor(equip.data.ItemData []itemTemplates, boolean local);
/** convenience initialisation: ongoing monitor for simple
       * events, rather than data items. <P>
       * 
       * Used for stateless event distribution, e.g. comparable to 
       * Elvin. */
  public abstract void initAsSimpleEventMonitor(equip.data.Event eventTemplate, boolean local);
/** convenience initialisation: version of {@link
       * #initAsSimpleEventMonitor} for multiple event templates. */
  public abstract void initAsCompoundEventMonitor(equip.data.Event []eventTemplates, boolean local);
  /** IDL-generated helper routine to get module name (currently <b>unimplemented</b>).
  * @return name of this class's module
  */
  public String getModuleName() { return null; }
  /** Standard IDL-generated equality test.
  * @param c The object to be compared against this.
  * @return true if this is equal to <code>c</code>
  */
  public boolean equals(java.lang.Object c) {
    if (c==null) return false;
    if (!c.getClass().equals(getClass())) return false;
    return _equals_helper((EventPattern)c);
  }
  /** Internal IDL-generated equality test helper */
  public boolean _equals_helper(EventPattern c) {
    if (c==null) return false;
    if (!super._equals_helper(c)) return false;
    if (c.itemTemplates==null || itemTemplates==null || c.itemTemplates.length!=itemTemplates.length) return false;
    int i1;
    for (i1=0; i1<itemTemplates.length; i1++) {
      if (itemTemplates[i1]!=c.itemTemplates[i1] && (itemTemplates[i1]==null || !itemTemplates[i1].equals(c.itemTemplates[i1]))) return false;
    }
    if (c.eventTemplates==null || eventTemplates==null || c.eventTemplates.length!=eventTemplates.length) return false;
    for (i1=0; i1<eventTemplates.length; i1++) {
      if (eventTemplates[i1]!=c.eventTemplates[i1] && (eventTemplates[i1]==null || !eventTemplates[i1].equals(c.eventTemplates[i1]))) return false;
    }
    if(c.deleteOnCheck != deleteOnCheck) return false;
    if(c.deleteOnMatch != deleteOnMatch) return false;
    if(c.matched != matched) return false;
    if(c.deleteItemOnMatch != deleteItemOnMatch) return false;
    if(c.local != local) return false;
    return true;
  }
  /** Standard IDL-generated template match test. 
  * @param c The object to be checked against this template.
  * @return true if <code>this</code> (as a template) matches the argument
  */
  public boolean matches(java.lang.Object c) {
    if (c==null || !(c instanceof EventPattern)) return false;
    return _matches_helper((EventPattern)c);
  }
  /** Internal IDL-generated match test helper */
  public boolean _matches_helper(EventPattern c) {
    if (c==null) return false;
    if (!super._matches_helper(c)) return false;
    if (itemTemplates!=null && itemTemplates.length!=0 && (c.itemTemplates==null || c.itemTemplates.length!=itemTemplates.length)) return false;
    int i1;
    for (i1=0; i1<itemTemplates.length; i1++) {
      if (itemTemplates[i1]!=null && !itemTemplates[i1].matches(c.itemTemplates[i1])) return false;
    }
    if (eventTemplates!=null && eventTemplates.length!=0 && (c.eventTemplates==null || c.eventTemplates.length!=eventTemplates.length)) return false;
    for (i1=0; i1<eventTemplates.length; i1++) {
      if (eventTemplates[i1]!=null && !eventTemplates[i1].matches(c.eventTemplates[i1])) return false;
    }
    if(c.deleteOnCheck != deleteOnCheck) return false;
    if(c.deleteOnMatch != deleteOnMatch) return false;
    if(c.matched != matched) return false;
    if(c.deleteItemOnMatch != deleteItemOnMatch) return false;
    if(c.local != local) return false;
    return true;
  }
  /** Internal IDL-generated serialisation helper. Used by {@link equip.runtime.ObjectInputStream} and {@link equip.runtime.ObjectOutputStream} only. */
  public void writeObject(ObjectOutputStream out)
    throws java.io.IOException {
    super.writeObject(out);
    out.writeObjectStart();
    out.writeInt(itemTemplates.length);
    int i1;
    for (i1=0; i1<itemTemplates.length; i1++) {
      out.writeObject(itemTemplates[i1]);
    }
    out.writeInt(eventTemplates.length);
    for (i1=0; i1<eventTemplates.length; i1++) {
      out.writeObject(eventTemplates[i1]);
    }
    out.writeBoolean(deleteOnCheck);
    out.writeBoolean(deleteOnMatch);
    out.writeBoolean(matched);
    out.writeBoolean(deleteItemOnMatch);
    out.writeBoolean(local);
    out.writeObjectEnd();
  }
  /** Internal IDL-generated serialisation helper. Used by {@link ObjectInputStream} and {@link ObjectOutputStream} only. */
  public void readObject(ObjectInputStream in)
    throws java.io.IOException, ClassNotFoundException, 
      InstantiationException {
    super.readObject(in);
    in.readObjectStart();
    { int len=0;
      len = in.readInt();
      itemTemplates = new equip.data.ItemData [len];
    }
    int i1;
    for (i1=0; i1<itemTemplates.length; i1++) {
      itemTemplates[i1] = (equip.data.ItemData )in.readObject();
    }
    { int len=0;
      len = in.readInt();
      eventTemplates = new equip.data.Event [len];
    }
    for (i1=0; i1<eventTemplates.length; i1++) {
      eventTemplates[i1] = (equip.data.Event )in.readObject();
    }
    deleteOnCheck = in.readBoolean();
    deleteOnMatch = in.readBoolean();
    matched = in.readBoolean();
    deleteItemOnMatch = in.readBoolean();
    local = in.readBoolean();
    in.readObjectEnd();
  }


} /* class EventPattern */

/* EOF */
