/*
<COPYRIGHT>

Copyright (c) 2002-2005, University of Nottingham
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 - Redistributions of source code must retain the above copyright notice, this
   list of conditions and the following disclaimer.

 - Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

 - Neither the name of the University of Nottingham
   nor the names of its contributors may be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

</COPYRIGHT>

Created by: Chris Greenhalgh (University of Nottingham)
Contributors:
  Chris Greenhalgh (University of Nottingham)

*/
/* ItemEventKind 
 * autogenerated from common/idl/eqDataTypes.idl
 * by eqidl
 * DO NOT MODIFY
 */


package equip.data;

import equip.runtime.*;

/** The 'kind' of an {@link AddEvent} or {@link DeleteEvent}.
     *
     * EQDATA_KIND_NORMAL: new global event<p>
     * EQDATA_KIND_LOCAL: local delivery of existing info
     * pseudo event, synthesised to satisfy patterns looking for
     * existing items<p>
     * EQDATA_KIND_PRESENT, 
     * EQDATA_KIND_BOUND: delete only - due to agent remove
     * set internally (from NORMAL) if add event with lease
     * arrives with previous item still in place (this would
     * be an error with a non-leased item)<p>
     * EQDATA_KIND_LEASE_RENEW,
     * EQDATA_KIND_LEASE_EXPIRE: delete generated due to lease expire<p>
     */
public class ItemEventKind {
/** new global event */
  public static final int EQDATA_KIND_NORMAL = 0;
/** not sure what this is for; local only event? */
  public static final int EQDATA_KIND_LOCAL = 1;
/** pseudo event typically synthesised by the dataspace to
       * satisfy patterns looking for existing items */
  public static final int EQDATA_KIND_PRESENT = 2;
/** delete only - indicates that the event has been synthesised
       * as a result of a process-bound data item's (see {@link
       * ItemBindingInfo#processBound}) responsible agent leaving the
       * dataspace. */
  public static final int EQDATA_KIND_BOUND = 3;
/**  set internally (from NORMAL) if add event
       * with lease arrives with previous item still in place (this
       * would be an error with a non-leased item). */
  public static final int EQDATA_KIND_LEASE_RENEW = 4;
/** delete only - indicates that the event has been synthesised
       * as a result of a item with a lease expiring (see {@link
       * ItemBindingInfo#itemLease}). */
  public static final int EQDATA_KIND_LEASE_EXPIRE = 5;
};
/* EOF */
