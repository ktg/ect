/*
<COPYRIGHT>

Copyright (c) 2002-2005, University of Nottingham
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 - Redistributions of source code must retain the above copyright notice, this
   list of conditions and the following disclaimer.

 - Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

 - Neither the name of the University of Nottingham
   nor the names of its contributors may be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

</COPYRIGHT>

Created by: Chris Greenhalgh (University of Nottingham)
Contributors:
  Chris Greenhalgh (University of Nottingham)

*/
/* SerializedObject 
 * initially autogenerated from ../../include/equip_data_tuple.idl
 * by eqidl
 */


package equip.data;

import equip.runtime.*;
import java.io.*;

/** Implementation of IDL'd abstract class {@link SerializedObject} */
public class SerializedObjectImpl extends SerializedObject {
  /* lifecycle */
  public SerializedObjectImpl() {
    //....
  }
  /** convenience constructor - assign value by serialising object */
  public SerializedObjectImpl(java.io.Serializable o) 
      throws java.io.IOException {
      setValue(o);
  }
  /** assign value by serialising object.
   * encodes null as no data.
   */
  public void setValue(java.io.Serializable o) throws java.io.IOException {
      if (o==null) {
	  serializationMethod = "null";
	  data = new byte[0];
	  return;
      }
      serializationMethod = "java";
      
      ByteArrayOutputStream byteOS = new ByteArrayOutputStream();
      java.io.ObjectOutputStream objectOS = 
	  new java.io.ObjectOutputStream(byteOS);
      objectOS.writeObject(o);
      objectOS.flush();
      data = byteOS.toByteArray();
  }
  /** get value by deserialization of data.
   * returns null if there is no data. 
   */
  public java.lang.Object getValue() 
      throws java.io.IOException,
	     java.lang.ClassNotFoundException {
      if (serializationMethod==null)
	  return null;
      if (serializationMethod.equals("null") ||
	  data==null || data.length==0)
	  return null;
      if (serializationMethod.equals("java")) 
	  return getJavaValue();
      throw new java.io.IOException("Unknown serialization method: "+
				    serializationMethod);
  }
  /** get value using Java deserializationn - internal op.
   * pre-requisites: serializationMethod=="java", data!=null,
   * data.length!=0.
   */
  java.lang.Object getJavaValue() 
      throws java.io.IOException,
	     java.lang.ClassNotFoundException {
      ByteArrayInputStream byteIS = new ByteArrayInputStream(data);
      java.io.ObjectInputStream objectIS = 
	  new java.io.ObjectInputStream(byteIS);
      java.lang.Object o = objectIS.readObject();
      return o;
  }
  /* API */
  /* subclasses....*/


} /* class SerializedObject */

/* EOF */
