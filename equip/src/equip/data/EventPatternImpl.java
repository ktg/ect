/*
<COPYRIGHT>

Copyright (c) 2002-2005, University of Nottingham
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 - Redistributions of source code must retain the above copyright notice, this
   list of conditions and the following disclaimer.

 - Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

 - Neither the name of the University of Nottingham
   nor the names of its contributors may be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

</COPYRIGHT>

Created by: Chris Greenhalgh (University of Nottingham)
Contributors:
  Chris Greenhalgh (University of Nottingham)

*/
/* EventPattern 
 * autogenerated from ../../include/eqDataTypes.idl
 * by eqidl
 * DO NOT MODIFY
 */


package equip.data;

import equip.runtime.*;

/** Implementation of IDL'd abstract class {@link EventPattern} */
public class EventPatternImpl extends EventPattern {
  /* lifecycle */
  public EventPatternImpl() {
    //....
  }

  /* API */
  public void initAsSimpleRead(ItemData itemTemplate, boolean local) {
      eventTemplates = new Event [1];
      // add - will be had by eventTemplates before we leave
      AddEvent add = new AddEventImpl();
      eventTemplates[0] = add;

      itemTemplates = new ItemData [1];
      itemTemplates[0] = itemTemplate;

      deleteOnCheck = false;
      deleteOnMatch = true; // ** read 1
      matched = false;
      deleteItemOnMatch = false;
      this.local = local;
      return;
  }
  public void initAsSimpleReadp(ItemData itemTemplate, boolean local) {
      eventTemplates = new Event [1];
      // add - will be had by eventTemplates before we leave
      AddEvent add = new AddEventImpl();
      eventTemplates[0] = add;

      itemTemplates = new ItemData [1];
      itemTemplates[0] = itemTemplate;

      deleteOnCheck = true; // ** no wait
      deleteOnMatch = true; // ** read 1
      matched = false;
      deleteItemOnMatch = false;
      this.local = local;
      return;
  }
  public void initAsSimpleOut(ItemData itemTemplate, boolean local) {
      eventTemplates = new Event [1];
      // add - will be had by eventTemplates before we leave
      AddEvent add = new AddEventImpl();
      eventTemplates[0] = add;

      itemTemplates = new ItemData [1];
      itemTemplates[0] = itemTemplate;

      deleteOnCheck = false;
      deleteOnMatch = true; // ** read 1
      matched = false;
      deleteItemOnMatch = true; // ** out
      this.local = local;
      return;
  }
  public void initAsSimpleCopyCollect(ItemData itemTemplate, boolean local) {
      eventTemplates = new Event [1];
      // add - will be had by eventTemplates before we leave
      AddEvent add = new AddEventImpl();
      eventTemplates[0] = add;

      itemTemplates = new ItemData [1];
      itemTemplates[0] = itemTemplate;

      deleteOnCheck = true;
      deleteOnMatch = false; // ** read many
      matched = false;
      deleteItemOnMatch = false;
      this.local = local;
      return;
  }
  public void initAsSimpleCollect(ItemData itemTemplate, boolean local) {
      eventTemplates = new Event [1];
      // add - will be had by eventTemplates before we leave
      AddEvent add = new AddEventImpl();
      eventTemplates[0] = add;

      itemTemplates = new ItemData [1];
      itemTemplates[0] = itemTemplate;

      deleteOnCheck = true;
      deleteOnMatch = false; // ** read many
      matched = false;
      deleteItemOnMatch = true; // ** out
      this.local = local;
      return;
  }
  public void initAsSimpleItemMonitor(ItemData itemTemplate, boolean local) {
      eventTemplates = new Event [4];
      // add
      // will be had by eventTemplates before we leave
      AddEvent add = new AddEventImpl();
      eventTemplates[0] = add;
      // delete 
      DeleteEvent del = new DeleteEventImpl();
      eventTemplates[1] = del;
      // update
      UpdateEvent upd = new UpdateEventImpl();
      eventTemplates[2] = upd;
      // mutate
      MutateEvent mut = new MutateEventImpl();
      eventTemplates[3] = mut;
      
      itemTemplates = new ItemData [1];
      itemTemplates[0] = itemTemplate;

      deleteOnCheck = false;
      deleteOnMatch = false; 
      matched = false;
      deleteItemOnMatch = false;
      this.local = local;
      return;
  }
  public void initAsCompoundItemMonitor(ItemData []itemTemplates, boolean local) {
      eventTemplates = new Event [4];
      // add
      // will be had by eventTemplates before we leave
      AddEvent add = new AddEventImpl();
      eventTemplates[0] = add;
      // delete 
      DeleteEvent del = new DeleteEventImpl();
      eventTemplates[1] = del;
      // update
      UpdateEvent upd = new UpdateEventImpl();
      eventTemplates[2] = upd;
      // mutate
      MutateEvent mut = new MutateEventImpl();
      eventTemplates[3] = mut;
      
      this.itemTemplates = itemTemplates;

      deleteOnCheck = false;
      deleteOnMatch = false; 
      matched = false;
      deleteItemOnMatch = false;
      this.local = local;
      return;
  }
  public void initAsSimpleEventMonitor(Event eventTemplate, boolean local) {
      eventTemplates = new Event [1];
      eventTemplates[0] = eventTemplate;

      itemTemplates = new ItemData [0];

      deleteOnCheck = false; 
      deleteOnMatch = false; 
      matched = false;
      deleteItemOnMatch = false; 
      this.local = local;
      return;
  }
  public void initAsCompoundEventMonitor(Event []eventTemplates, boolean local) {
      this.eventTemplates = eventTemplates;

      itemTemplates = new ItemData [0];

      deleteOnCheck = false; 
      deleteOnMatch = false; 
      matched = false;
      deleteItemOnMatch = false; 
      this.local = local;
      return;
  }
  /* subclasses....*/


} /* class EventPattern */

/* EOF */
