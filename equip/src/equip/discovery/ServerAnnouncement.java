/*
<COPYRIGHT>

Copyright (c) 2002-2005, University of Nottingham
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 - Redistributions of source code must retain the above copyright notice, this
   list of conditions and the following disclaimer.

 - Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

 - Neither the name of the University of Nottingham
   nor the names of its contributors may be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

</COPYRIGHT>

Created by: Chris Greenhalgh (University of Nottingham)
Contributors:
  Chris Greenhalgh (University of Nottingham)

*/
/* ServerAnnouncement 
 * autogenerated from ../../include/equip_discovery_types.idl
 * by eqidl
 * DO NOT MODIFY
 */


package equip.discovery;

import equip.runtime.*;

/** Announcement is this serialised into a UDP packet.
     * 
     * Unicast announcement = discovery response.
     * 
     * Again, based on JINI multicast announcement.     
     *
     * See DiscoveryRequest.
     */
public abstract class ServerAnnouncement extends ValueBase {

  /* lifecycle */
  public ServerAnnouncement() {}

  /* member variables */
/** discovery protocol version - will be encoded before object *//** server(s) announced */
  public equip.discovery.ServerDiscoveryInfo infos[] = new equip.discovery.ServerDiscoveryInfo [0];
/** expected announcement interval in milliseconds */
  public int announcementIntervalMillis;
  /* helper routines */
  public String getModuleName() { return null; }
  public boolean equals(java.lang.Object c) {
    if (c==null) return false;
    if (!c.getClass().equals(getClass())) return false;
    return _equals_helper((ServerAnnouncement)c);
  }
  public boolean _equals_helper(ServerAnnouncement c) {
    if (c==null) return false;
    if (!super._equals_helper(c)) return false;
    if (c.infos==null || infos==null || c.infos.length!=infos.length) return false;
    int i1;
    for (i1=0; i1<infos.length; i1++) {
      if (infos[i1]!=c.infos[i1] && (infos[i1]==null || !infos[i1].equals(c.infos[i1]))) return false;
    }
    if(c.announcementIntervalMillis != announcementIntervalMillis) return false;
    return true;
  }
  public boolean matches(java.lang.Object c) {
    if (c==null || !(c instanceof ServerAnnouncement)) return false;
    return _matches_helper((ServerAnnouncement)c);
  }
  public boolean _matches_helper(ServerAnnouncement c) {
    if (c==null) return false;
    if (!super._matches_helper(c)) return false;
    if (infos!=null && infos.length!=0 && (c.infos==null || c.infos.length!=infos.length)) return false;
    int i1;
    for (i1=0; i1<infos.length; i1++) {
      if (infos[i1]!=null && !infos[i1].matches(c.infos[i1])) return false;
    }
    if(c.announcementIntervalMillis != announcementIntervalMillis) return false;
    return true;
  }
  /* used by Object(In|Out)putStream only */
  public void writeObject(ObjectOutputStream out)
    throws java.io.IOException {
    out.writeObjectStart();
    out.writeInt(infos.length);
    int i1;
    for (i1=0; i1<infos.length; i1++) {
      out.writeObject(infos[i1]);
    }
    out.writeInt(announcementIntervalMillis);
    out.writeObjectEnd();
  }
  public void readObject(ObjectInputStream in)
    throws java.io.IOException, ClassNotFoundException, 
      InstantiationException {
    in.readObjectStart();
    { int len=0;
      len = in.readInt();
      infos = new equip.discovery.ServerDiscoveryInfo [len];
    }
    int i1;
    for (i1=0; i1<infos.length; i1++) {
      infos[i1] = (equip.discovery.ServerDiscoveryInfo )in.readObject();
    }
    announcementIntervalMillis = in.readInt();
    in.readObjectEnd();
  }


} /* class ServerAnnouncement */

/* EOF */
