/*
<COPYRIGHT>

Copyright (c) 2002-2005, University of Nottingham
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 - Redistributions of source code must retain the above copyright notice, this
   list of conditions and the following disclaimer.

 - Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

 - Neither the name of the University of Nottingham
   nor the names of its contributors may be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

</COPYRIGHT>

Created by: Chris Greenhalgh (University of Nottingham)
Contributors:
  Chris Greenhalgh (University of Nottingham)

*/
/* ConfigManager 
 * autogenerated from ../../include/equip_config_types.idl
 * by eqidl
 * DO NOT MODIFY
 */


package equip.config;

import equip.runtime.*;

/** Configuration manager for providing an application's
     * configuration information, normally from property files (IDL'd
     * in equip_config_types.idl).
     *
     * <b>Note:</b> always use a single creating with 
     * {@link equip.runtime.SingletonManager}. */
public abstract class ConfigManager extends ValueBase {

  /** Default no-arg constructor */
  public ConfigManager() {}

  /* member variables */
/** the configuration manager's internal name,value pairs */
  public equip.config.NameValuePair entries[] = new equip.config.NameValuePair [0];
/** Finds and reads name':'value pairs, one per line.
       * Also allows name '{' ... '}' as prepending 'name.' to 
       * enclosed names.
       * default search path is (to effect of) '.:${EQUIP_PATH}'
       */
  public abstract int readConfigFile(String filename, int rating, String extraPath);
/** get a boolean configuration value (true = 'y', 't', '1') */
  public abstract boolean getBooleanValue(String name, boolean defaultValue);
/** get a character configuration value */
  public abstract char getCharValue(String name, char defaultValue);
/** get a IDL long (Java int) configuration value */
  public abstract int getLongValue(String name, int defaultValue);
/** get a short configuration value */
  public abstract String getStringValue(String name, String defaultValue);
/** get a float configuration value */
  public abstract float getFloatValue(String name, float defaultValue);
/** get a double configuration value */
  public abstract double getDoubleValue(String name, double defaultValue);
/** get a configuration value as a {@link
          equip.runtime.ValueBase} */
  public abstract equip.runtime.ValueBase getObjectValue(String name, equip.runtime.ValueBase defaultValue);
  /** IDL-generated helper routine to get module name (currently <b>unimplemented</b>).
  * @return name of this class's module
  */
  public String getModuleName() { return null; }
  /** Standard IDL-generated equality test.
  * @param c The object to be compared against this.
  * @return true if this is equal to <code>c</code>
  */
  public boolean equals(java.lang.Object c) {
    if (c==null) return false;
    if (!c.getClass().equals(getClass())) return false;
    return _equals_helper((ConfigManager)c);
  }
  /** Internal IDL-generated equality test helper */
  public boolean _equals_helper(ConfigManager c) {
    if (c==null) return false;
    if (!super._equals_helper(c)) return false;
    if (c.entries==null || entries==null || c.entries.length!=entries.length) return false;
    int i1;
    for (i1=0; i1<entries.length; i1++) {
      if (entries[i1]!=c.entries[i1] && (entries[i1]==null || !entries[i1].equals(c.entries[i1]))) return false;
    }
    return true;
  }
  /** Standard IDL-generated template match test. 
  * @param c The object to be checked against this template.
  * @return true if <code>this</code> (as a template) matches the argument
  */
  public boolean matches(java.lang.Object c) {
    if (c==null || !(c instanceof ConfigManager)) return false;
    return _matches_helper((ConfigManager)c);
  }
  /** Internal IDL-generated match test helper */
  public boolean _matches_helper(ConfigManager c) {
    if (c==null) return false;
    if (!super._matches_helper(c)) return false;
    if (entries!=null && entries.length!=0 && (c.entries==null || c.entries.length!=entries.length)) return false;
    int i1;
    for (i1=0; i1<entries.length; i1++) {
      if (entries[i1]!=null && !entries[i1].matches(c.entries[i1])) return false;
    }
    return true;
  }
  /** Internal IDL-generated serialisation helper. Used by {@link equip.runtime.ObjectInputStream} and {@link equip.runtime.ObjectOutputStream} only. */
  public void writeObject(ObjectOutputStream out)
    throws java.io.IOException {
    out.writeObjectStart();
    out.writeInt(entries.length);
    int i1;
    for (i1=0; i1<entries.length; i1++) {
      out.writeObject(entries[i1]);
    }
    out.writeObjectEnd();
  }
  /** Internal IDL-generated serialisation helper. Used by {@link ObjectInputStream} and {@link ObjectOutputStream} only. */
  public void readObject(ObjectInputStream in)
    throws java.io.IOException, ClassNotFoundException, 
      InstantiationException {
    in.readObjectStart();
    { int len=0;
      len = in.readInt();
      entries = new equip.config.NameValuePair [len];
    }
    int i1;
    for (i1=0; i1<entries.length; i1++) {
      entries[i1] = (equip.config.NameValuePair )in.readObject();
    }
    in.readObjectEnd();
  }


} /* class ConfigManager */

/* EOF */
