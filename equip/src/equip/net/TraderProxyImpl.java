/*
<COPYRIGHT>

Copyright (c) 2002-2005, University of Nottingham
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 - Redistributions of source code must retain the above copyright notice, this
   list of conditions and the following disclaimer.

 - Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

 - Neither the name of the University of Nottingham
   nor the names of its contributors may be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

</COPYRIGHT>

Created by: Chris Greenhalgh (University of Nottingham)
Contributors:
  Chris Greenhalgh (University of Nottingham)

*/
/* TraderProxy 
 * autogenerated from ../../include/eqTraderTypes.idl
 * by eqidl
 * DO NOT MODIFY
 */


package equip.net;

import equip.runtime.*;
import java.net.*;

/** Implementation of IDL'd class {@link TraderProxy}.
 *
 * Delegates to {@link ProxyDelegate}. */
public class TraderProxyImpl extends TraderProxy {

  private ProxyDelegate delegate = new ProxyDelegate();

  /* lifecycle */
  public TraderProxyImpl() {
      delegate.init(this, null, null);
  }

  /* API */
  public ValueBase lookup(String name, String classname) {
      TraderLookup request = new TraderLookupImpl();
      request.name = name;
      request.classname = classname;

      ValueBase result = delegate.doSimpleRpc(request);
      if (result==null) {
	  System.err.println("TraderProxyImpl::lookup failed");
	  return null;
      }
      return result;
  }
  public boolean bind(String name, ValueBase proxy) {
      return rebind(name, proxy, false);
  }
  public boolean rebind(String name, ValueBase proxy) {
      return rebind(name, proxy, true);
  }
  public boolean rebind(String name, ValueBase proxy, boolean replaceFlag) {
      TraderRebind request = new TraderRebindImpl();
      request.name = name;
      request.binding = proxy;
      request.replaceFlag = replaceFlag;

      ValueBase result = delegate.doSimpleRpc(request);
      if (result==null) {
	  System.err.println("TraderProxyImpl::(re)bind failed");
	  return false;
      }
      if (!(result instanceof TraderRebindReply)) {
	  System.err.println("TraderProxyImpl::(re)bind received "+
			     "unexpected reply type "+
			     result.getClass().getName());
	  return false;
      }
      TraderRebindReply record = (TraderRebindReply)result;
      return record.okFlag;
  }
  public Moniker getMonikerDefault() {
      SimpleTCPMoniker mon = new SimpleTCPMonikerImpl();
      mon.initFromPort((short)DEFAULT_TRADER_PORT.value);
      return mon;
  }
  public Moniker getMonikerFromPort(short port) {
      SimpleTCPMoniker mon = new SimpleTCPMonikerImpl();
      mon.initFromPort(port);
      return mon;
  }
  public Moniker getMonikerFromHost(String host, short port) {
      SimpleTCPMoniker mon = new SimpleTCPMonikerImpl();
      mon.initFromHost(host, port);
      return mon;
  }
  public Moniker getMonikerFromAddr(int addr, short port) {
      SimpleTCPMoniker mon = new SimpleTCPMonikerImpl();
      mon.initFromAddr(addr, port);
      return mon;
  }
  /* subclasses....*/


/* subclass ServiceProxy */
  public boolean activate(equip.net.DeactivateCallback callback,
			  equip.runtime.ValueBase closure) {
    return delegate.activate(callback, closure);
  }
  public void deactivate() {
    delegate.deactivate();
  }


} /* class TraderProxy */

/* EOF */
